diff --git a/solid/solid/backends/udisks2/udisksmanager.cpp b/solid/solid/backends/udisks2/udisksmanager.cpp
index 71b9e3e..b36d7ce 100644
--- a/solid/solid/backends/udisks2/udisksmanager.cpp
+++ b/solid/solid/backends/udisks2/udisksmanager.cpp
@@ -198,6 +198,8 @@ void Manager::slotInterfacesAdded(const QDBusObjectPath &object_path, const QVar
 
     qDebug() << udi << "has new interfaces:" << interfaces_and_properties.keys();
 
+    updateDrive(udi);
+
     // new device, we don't know it yet
     if (!m_deviceCache.contains(udi)) {
         m_deviceCache.append(udi);
@@ -220,6 +222,8 @@ void Manager::slotInterfacesRemoved(const QDBusObjectPath &object_path, const QS
 
     qDebug() << udi << "lost interfaces:" << interfaces;
 
+    updateDrive(udi);
+
     Device device(udi);
 
     if (!udi.isEmpty() && (interfaces.isEmpty() || device.interfaces().isEmpty())) {
@@ -237,6 +241,7 @@ void Manager::slotMediaChanged(const QDBusMessage & msg)
         return;
 
     const QString udi = msg.path();
+    updateDrive(udi);
     qulonglong size = properties.value("Size").toULongLong();
     qDebug() << "MEDIA CHANGED in" << udi << "; size is:" << size;
 
@@ -260,3 +265,14 @@ const QStringList & Manager::deviceCache()
     return m_deviceCache;
 }
 
+void Manager::updateDrive(const QString & udi) {
+    DeviceBackend *backend = DeviceBackend::backendForUDI(udi);
+    if (!backend) return;
+    backend->allProperties();
+    QVariant driveProp = backend->prop("Drive");
+    if (!driveProp.isValid()) return;
+    QDBusObjectPath drivePath = qdbus_cast<QDBusObjectPath>(driveProp);
+    DeviceBackend *driveBackend = DeviceBackend::backendForUDI(drivePath.path());
+    if (!driveBackend) return;
+    driveBackend->allProperties();
+}
diff --git a/solid/solid/backends/udisks2/udisksmanager.h b/solid/solid/backends/udisks2/udisksmanager.h
index fb929ce..36c8b2e 100644
--- a/solid/solid/backends/udisks2/udisksmanager.h
+++ b/solid/solid/backends/udisks2/udisksmanager.h
@@ -59,6 +59,7 @@ private Q_SLOTS:
 private:
     const QStringList &deviceCache();
     void introspect(const QString & path, bool checkOptical = false);
+    void updateDrive(const QString & udi);
     QSet<Solid::DeviceInterface::Type> m_supportedInterfaces;
     org::freedesktop::DBus::ObjectManager m_manager;
     QStringList m_deviceCache;
